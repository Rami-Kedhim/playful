
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, AlertCircle, Brain, AlertTriangle, Lightbulb } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

interface HermesSeoRecommendationsProps {
  title: string;
  description: string;
  keywords: string[];
  contentType: 'profile' | 'content' | 'livecam' | 'event';
}

const HermesSeoRecommendations: React.FC<HermesSeoRecommendationsProps> = ({
  title,
  description,
  keywords,
  contentType
}) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  
  // Sample recommendations (in a real implementation, these would be generated by HERMES)
  const recommendations = {
    title: {
      improvement: "Medium",
      suggestions: [
        "Add more specific keywords like location or unique service",
        "Keep title length between 50-60 characters for optimal display",
        "Consider adding a call-to-action element"
      ],
      examples: [
        `${title} - Premium Experience in [Location]`,
        `Exclusive ${title} - Top Rated Service`
      ]
    },
    description: {
      improvement: "High",
      suggestions: [
        "Include primary keywords in the first 100 characters",
        "Add more detail about unique selling points",
        "Use persuasive language that encourages engagement"
      ],
      examples: [
        description.length > 100 ? 
          `${description.substring(0, 100)}... [optimized continuation]` : 
          `${description} [extended with keywords and details]`
      ]
    },
    keywords: {
      improvement: "Low",
      suggestions: [
        "Add 2-3 location-specific keywords",
        "Include trending industry terms",
        "Consider long-tail keyword variations"
      ],
      examples: keywords.length > 0 ? 
        [...keywords, "premium", "exclusive", "verified"] : 
        ["recommended", "keyword1", "keyword2"]
    }
  };
  
  // Function to simulate HERMES analysis
  const handleAnalyze = () => {
    setIsAnalyzing(true);
    
    // Simulate analysis delay
    setTimeout(() => {
      setIsAnalyzing(false);
      setAnalysisComplete(true);
    }, 1500);
  };
  
  // Helper function to get color based on improvement level
  const getImprovementColor = (level: string) => {
    switch(level) {
      case "High": return "text-red-500";
      case "Medium": return "text-yellow-500";
      case "Low": return "text-green-500";
      default: return "text-blue-500";
    }
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Brain className="h-5 w-5 mr-2 text-primary" />
          SEO Recommendations
        </CardTitle>
        <CardDescription>
          AI-powered suggestions to improve your content visibility
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {!analysisComplete ? (
          <div className="text-center py-8">
            <Lightbulb className="h-12 w-12 mx-auto text-primary/50" />
            <h3 className="mt-4 text-lg font-medium">Ready to analyze your content</h3>
            <p className="mt-2 text-sm text-muted-foreground mb-6">
              HERMES will analyze your content and provide specific recommendations to improve SEO performance
            </p>
            <Button 
              onClick={handleAnalyze} 
              disabled={isAnalyzing}
              className="flex items-center mx-auto"
            >
              {isAnalyzing ? (
                <>
                  <div className="animate-spin mr-2 h-4 w-4 border-2 border-primary border-t-transparent rounded-full"></div>
                  Analyzing...
                </>
              ) : (
                <>
                  <Brain className="mr-2 h-4 w-4" />
                  Start HERMES Analysis
                </>
              )}
            </Button>
          </div>
        ) : (
          <div className="space-y-6">
            <Alert>
              <Brain className="h-4 w-4 text-primary" />
              <AlertDescription>
                HERMES has analyzed your {contentType} content and identified several optimization opportunities
              </AlertDescription>
            </Alert>
            
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="title">
                <AccordionTrigger className="flex items-center">
                  <div className="flex items-center">
                    <span className="font-medium">Title Recommendations</span>
                    <Badge variant="outline" className={`ml-3 ${getImprovementColor(recommendations.title.improvement)}`}>
                      {recommendations.title.improvement} Priority
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium mb-2">Current Title:</h4>
                      <p className="text-sm bg-muted p-3 rounded-md">{title}</p>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Suggestions:</h4>
                      <ul className="text-sm space-y-2">
                        {recommendations.title.suggestions.map((suggestion, index) => (
                          <li key={`title-sugg-${index}`} className="flex">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>{suggestion}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    {recommendations.title.examples.length > 0 && (
                      <div>
                        <h4 className="font-medium mb-2">Examples:</h4>
                        <ul className="text-sm space-y-2">
                          {recommendations.title.examples.map((example, index) => (
                            <li key={`title-ex-${index}`} className="bg-primary/5 border border-primary/10 p-2 rounded-md">
                              {example}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </AccordionContent>
              </AccordionItem>
              
              <AccordionItem value="description">
                <AccordionTrigger>
                  <div className="flex items-center">
                    <span className="font-medium">Description Recommendations</span>
                    <Badge variant="outline" className={`ml-3 ${getImprovementColor(recommendations.description.improvement)}`}>
                      {recommendations.description.improvement} Priority
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium mb-2">Current Description:</h4>
                      <p className="text-sm bg-muted p-3 rounded-md">{description}</p>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Suggestions:</h4>
                      <ul className="text-sm space-y-2">
                        {recommendations.description.suggestions.map((suggestion, index) => (
                          <li key={`desc-sugg-${index}`} className="flex">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>{suggestion}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    {recommendations.description.examples.length > 0 && (
                      <div>
                        <h4 className="font-medium mb-2">Examples:</h4>
                        <ul className="text-sm space-y-2">
                          {recommendations.description.examples.map((example, index) => (
                            <li key={`desc-ex-${index}`} className="bg-primary/5 border border-primary/10 p-2 rounded-md">
                              {example}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </AccordionContent>
              </AccordionItem>
              
              <AccordionItem value="keywords">
                <AccordionTrigger>
                  <div className="flex items-center">
                    <span className="font-medium">Keywords Recommendations</span>
                    <Badge variant="outline" className={`ml-3 ${getImprovementColor(recommendations.keywords.improvement)}`}>
                      {recommendations.keywords.improvement} Priority
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium mb-2">Current Keywords:</h4>
                      <div className="flex flex-wrap gap-2">
                        {keywords.length > 0 ? (
                          keywords.map((keyword, index) => (
                            <Badge key={`kw-${index}`} variant="secondary">{keyword}</Badge>
                          ))
                        ) : (
                          <p className="text-sm text-muted-foreground">No keywords specified</p>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Suggestions:</h4>
                      <ul className="text-sm space-y-2">
                        {recommendations.keywords.suggestions.map((suggestion, index) => (
                          <li key={`kw-sugg-${index}`} className="flex">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span>{suggestion}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Recommended Keywords:</h4>
                      <div className="flex flex-wrap gap-2">
                        {recommendations.keywords.examples.map((keyword, index) => (
                          <Badge key={`kw-ex-${index}`} variant="outline" className="bg-primary/5">
                            {keyword}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
            
            <div className="pt-4 border-t">
              <Alert variant="default" className="bg-green-500/10 text-green-500 border-green-500/20">
                <CheckCircle className="h-4 w-4" />
                <AlertDescription className="text-green-500">
                  Apply these recommendations to improve your content's visibility score by approximately 35%
                </AlertDescription>
              </Alert>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default HermesSeoRecommendations;
