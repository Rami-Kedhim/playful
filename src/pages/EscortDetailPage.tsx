
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Layout from '@/layouts/Layout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { format, addDays, addHours, startOfHour } from 'date-fns';
import { Check, MapPin, Phone, Mail, Clock, Star, Calendar as CalendarIcon, DollarSign } from 'lucide-react';
import { Escort } from '@/types/Escort';
import MapViewer from '@/components/maps/MapViewer';
import EscortScraper from '@/services/scrapers/EscortScraper';
import BoostButton from '@/components/boost/button/BoostButton';
import { bookingService } from '@/services/bookingService';

const EscortDetailPage = () => {
  const { id } = useParams<{ id: string }>();
  const [escort, setEscort] = useState<Escort | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(addDays(new Date(), 1));
  const [selectedTime, setSelectedTime] = useState<string>('19:00');
  const [selectedDuration, setSelectedDuration] = useState<string>('1hr');
  const [bookingDialogOpen, setBookingDialogOpen] = useState(false);
  const [bookingConfirmed, setBookingConfirmed] = useState(false);

  useEffect(() => {
    const fetchEscortDetails = async () => {
      if (!id) return;
      
      setLoading(true);
      try {
        const scraper = new EscortScraper();
        const data = await scraper.getEscortById(id);
        setEscort(data);
      } catch (error) {
        console.error('Error fetching escort details:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchEscortDetails();
  }, [id]);

  const handleBookAppointment = () => {
    setBookingDialogOpen(true);
  };

  const confirmBooking = async () => {
    if (!escort || !selectedDate || !selectedTime) return;
    
    try {
      // Convert selected date and time to a Date object
      const [hours, minutes] = selectedTime.split(':').map(Number);
      const bookingDate = new Date(selectedDate);
      bookingDate.setHours(hours, minutes, 0, 0);
      
      // Calculate end time based on duration
      let endDate;
      if (selectedDuration === '1hr') {
        endDate = addHours(bookingDate, 1);
      } else if (selectedDuration === '2hr') {
        endDate = addHours(bookingDate, 2);
      } else if (selectedDuration === '3hr') {
        endDate = addHours(bookingDate, 3);
      } else {
        // Overnight default to 12 hours
        endDate = addHours(bookingDate, 12);
      }
      
      // Create a booking object
      const booking = {
        id: '',  // Will be generated by the service
        escort_id: escort.id,
        client_id: 'current-user-id', // This would be the logged-in user's ID
        start_time: bookingDate.toISOString(),
        end_time: endDate.toISOString(),
        status: 'pending',
        price: calculatePrice(escort, selectedDuration),
        created_at: new Date().toISOString(),
        booking_type: 'in_person',
      };
      
      // Here we would call the booking service
      // await bookingService.createBooking(booking);
      
      setBookingConfirmed(true);
      
      // Close dialog after a delay
      setTimeout(() => {
        setBookingDialogOpen(false);
        setBookingConfirmed(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error creating booking:', error);
    }
  };

  const calculatePrice = (escort: Escort, duration: string): number => {
    const basePrice = escort.price || 0;
    
    switch (duration) {
      case '1hr':
        return basePrice;
      case '2hr':
        return basePrice * 1.8;
      case '3hr':
        return basePrice * 2.5;
      case 'overnight':
        return basePrice * 5;
      default:
        return basePrice;
    }
  };

  const timeSlots = Array.from({ length: 12 }, (_, i) => {
    const hour = i + 12; // Starting from 12 PM
    return `${hour}:00`;
  });

  if (loading) {
    return (
      <Layout
        title="Loading Profile"
        showBreadcrumbs
      >
        <div className="flex justify-center items-center h-64">
          <p className="text-lg text-muted-foreground">Loading escort profile...</p>
        </div>
      </Layout>
    );
  }

  if (!escort) {
    return (
      <Layout
        title="Profile Not Found"
        showBreadcrumbs
      >
        <div className="text-center py-20 text-muted-foreground">
          <h2 className="text-2xl mb-2">Profile Not Found</h2>
          <p>The escort profile you're looking for could not be found.</p>
        </div>
      </Layout>
    );
  }

  return (
    <Layout
      title={escort.name}
      description={`${escort.age ? `${escort.age} years` : ''} ${escort.location ? `â€¢ ${escort.location}` : ''}`}
      showBreadcrumbs
    >
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Profile Photos Section */}
        <div className="md:col-span-2">
          <Card>
            <CardContent className="p-0">
              <div className="aspect-video relative overflow-hidden rounded-t-lg">
                <img
                  src={escort.imageUrl || escort.profileImage || `https://picsum.photos/seed/${escort.id}/800/600`}
                  alt={escort.name}
                  className="w-full h-full object-cover"
                />
              </div>
              
              <div className="p-6">
                <div className="flex flex-wrap gap-2 mb-6">
                  {escort.services?.map((service, i) => (
                    <Badge key={i} variant="secondary">{service}</Badge>
                  ))}
                  {(escort.isVerified || escort.verified) && (
                    <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                      <Check className="mr-1 h-3 w-3" /> Verified
                    </Badge>
                  )}
                </div>
                
                <Tabs defaultValue="about" className="space-y-4">
                  <TabsList>
                    <TabsTrigger value="about">About</TabsTrigger>
                    <TabsTrigger value="services">Services</TabsTrigger>
                    <TabsTrigger value="gallery">Gallery</TabsTrigger>
                    <TabsTrigger value="reviews">Reviews</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="about">
                    <div className="prose prose-sm max-w-none">
                      <p>{escort.description || `${escort.name} is an experienced escort offering premium companionship services. Specializing in creating unforgettable experiences tailored to your desires.`}</p>
                      
                      <div className="mt-4 grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium mb-1">Age</h4>
                          <p>{escort.age || 'Not specified'}</p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium mb-1">Gender</h4>
                          <p>{escort.gender || 'Not specified'}</p>
                        </div>
                        {escort.languages && (
                          <div>
                            <h4 className="text-sm font-medium mb-1">Languages</h4>
                            <p>{escort.languages.join(', ')}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="services">
                    <div className="space-y-4">
                      <div>
                        <h3 className="font-medium mb-2">Available Services</h3>
                        <ul className="grid grid-cols-2 gap-2">
                          {escort.services?.map((service, i) => (
                            <li key={i} className="flex items-center gap-2">
                              <Check className="h-4 w-4 text-green-500" />
                              {service}
                            </li>
                          )) || (
                            <li className="text-muted-foreground">No specific services listed</li>
                          )}
                        </ul>
                      </div>
                      
                      <Separator />
                      
                      <div>
                        <h3 className="font-medium mb-2">Rates</h3>
                        <div className="grid grid-cols-2 gap-4">
                          <div className="p-3 border rounded-md text-center">
                            <p className="text-sm text-muted-foreground">1 Hour</p>
                            <p className="text-lg font-semibold">${escort.price || 0}</p>
                          </div>
                          <div className="p-3 border rounded-md text-center">
                            <p className="text-sm text-muted-foreground">2 Hours</p>
                            <p className="text-lg font-semibold">${Math.round((escort.price || 0) * 1.8)}</p>
                          </div>
                          <div className="p-3 border rounded-md text-center">
                            <p className="text-sm text-muted-foreground">3 Hours</p>
                            <p className="text-lg font-semibold">${Math.round((escort.price || 0) * 2.5)}</p>
                          </div>
                          <div className="p-3 border rounded-md text-center">
                            <p className="text-sm text-muted-foreground">Overnight</p>
                            <p className="text-lg font-semibold">${Math.round((escort.price || 0) * 5)}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="gallery">
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                      {(escort.gallery || escort.images || []).map((image, i) => (
                        <div key={i} className="aspect-square overflow-hidden rounded-md">
                          <img 
                            src={image} 
                            alt={`Gallery ${i+1}`}
                            className="w-full h-full object-cover transition-transform hover:scale-110"
                          />
                        </div>
                      ))}
                      
                      {/* Placeholder images if no gallery */}
                      {(!escort.gallery && !escort.images) && Array(6).fill(0).map((_, i) => (
                        <div key={i} className="aspect-square overflow-hidden rounded-md bg-muted">
                          <img 
                            src={`https://picsum.photos/seed/${escort.id}-${i}/300/300`}
                            alt={`Gallery ${i+1}`}
                            className="w-full h-full object-cover transition-transform hover:scale-110"
                          />
                        </div>
                      ))}
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="reviews">
                    {escort.reviewCount && escort.reviewCount > 0 ? (
                      <div className="space-y-4">
                        <div className="flex items-center gap-2 mb-4">
                          <div className="flex items-center gap-1 text-yellow-500">
                            {Array(5).fill(0).map((_, i) => (
                              <Star 
                                key={i} 
                                className={`h-5 w-5 ${i < Math.floor(escort.rating || 0) ? 'fill-current' : ''}`} 
                              />
                            ))}
                          </div>
                          <span className="text-xl font-semibold">{escort.rating}</span>
                          <span className="text-muted-foreground">({escort.reviewCount} reviews)</span>
                        </div>
                        
                        <div className="space-y-3">
                          {/* Sample reviews */}
                          {Array(3).fill(0).map((_, i) => (
                            <div key={i} className="p-3 border rounded-md">
                              <div className="flex items-center justify-between mb-2">
                                <div className="flex items-center gap-2">
                                  <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                                    <span className="text-sm">{String.fromCharCode(65 + i)}</span>
                                  </div>
                                  <span className="font-medium">Client {String.fromCharCode(65 + i)}</span>
                                </div>
                                <div className="flex">
                                  {Array(5).fill(0).map((_, j) => (
                                    <Star key={j} className={`h-3 w-3 ${j < 5 - (i % 2) ? 'text-yellow-500 fill-yellow-500' : 'text-muted'}`} />
                                  ))}
                                </div>
                              </div>
                              <p className="text-sm">
                                {i === 0 && "Amazing experience, very professional and friendly. Would recommend!"}
                                {i === 1 && "Great service, exactly as described. Will book again."}
                                {i === 2 && "Punctual, beautiful, and charming. A wonderful companion."}
                              </p>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <p className="text-muted-foreground">No reviews available yet.</p>
                    )}
                  </TabsContent>
                </Tabs>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Sidebar with booking and contact */}
        <div className="space-y-6">
          <Card>
            <CardContent className="pt-6">
              <div className="text-center mb-4">
                <h2 className="text-xl font-semibold">${escort.price}/hr</h2>
                <p className="text-sm text-muted-foreground">Book your time with {escort.name}</p>
              </div>
              
              <Button className="w-full mb-4" onClick={handleBookAppointment}>
                Book Appointment
              </Button>
              
              <div className="space-y-3">
                <div className="flex items-center gap-2 text-sm">
                  <MapPin className="h-4 w-4 text-muted-foreground" />
                  <span>{escort.location || 'Location not specified'}</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Phone className="h-4 w-4 text-muted-foreground" />
                  <span>Contact via message</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <span>Contact for email</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <span>Available now</span>
                </div>
              </div>
              
              <Separator className="my-4" />
              
              <BoostButton profileId={escort.id} variant="outline" className="w-full" />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Location</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="h-60 rounded-b-lg overflow-hidden">
                <MapViewer 
                  latitude={40.7128 + (Math.random() - 0.5) * 0.01}
                  longitude={-74.0060 + (Math.random() - 0.5) * 0.01}
                  zoom={14}
                  markerLabel={escort.name}
                  height="100%"
                />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Booking Dialog */}
      <Dialog open={bookingDialogOpen} onOpenChange={setBookingDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Book an Appointment</DialogTitle>
            <DialogDescription>
              Schedule your time with {escort.name}.
            </DialogDescription>
          </DialogHeader>
          
          {bookingConfirmed ? (
            <div className="flex flex-col items-center justify-center py-6">
              <div className="rounded-full bg-green-100 p-3 mb-4">
                <Check className="h-6 w-6 text-green-600" />
              </div>
              <h3 className="text-xl font-medium">Booking Confirmed!</h3>
              <p className="text-center text-muted-foreground mt-1">
                Your appointment with {escort.name} has been scheduled for{' '}
                {selectedDate && format(selectedDate, 'MMMM d, yyyy')} at {selectedTime}.
              </p>
            </div>
          ) : (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <h3 className="font-medium flex items-center gap-2">
                  <CalendarIcon className="h-4 w-4" /> Select Date
                </h3>
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  disabled={(date) => date < new Date()}
                  className="rounded-md border mx-auto"
                />
              </div>
              
              <div className="grid gap-2">
                <h3 className="font-medium flex items-center gap-2">
                  <Clock className="h-4 w-4" /> Select Time
                </h3>
                <div className="grid grid-cols-4 gap-2">
                  {timeSlots.map(time => (
                    <Button
                      key={time}
                      variant={selectedTime === time ? "default" : "outline"}
                      className={`text-sm h-9`}
                      onClick={() => setSelectedTime(time)}
                    >
                      {time}
                    </Button>
                  ))}
                </div>
              </div>
              
              <div className="grid gap-2">
                <h3 className="font-medium flex items-center gap-2">
                  <DollarSign className="h-4 w-4" /> Select Duration
                </h3>
                <div className="grid grid-cols-4 gap-2">
                  {['1hr', '2hr', '3hr', 'overnight'].map(duration => (
                    <Button
                      key={duration}
                      variant={selectedDuration === duration ? "default" : "outline"}
                      className="text-sm"
                      onClick={() => setSelectedDuration(duration)}
                    >
                      {duration}
                    </Button>
                  ))}
                </div>
              </div>
              
              <div className="bg-muted p-3 rounded-md mt-2">
                <div className="flex justify-between mb-2">
                  <span>Service fee:</span>
                  <span>${calculatePrice(escort, selectedDuration)}</span>
                </div>
                <div className="flex justify-between font-medium">
                  <span>Total:</span>
                  <span>${calculatePrice(escort, selectedDuration)}</span>
                </div>
              </div>
              
              <Button onClick={confirmBooking}>
                Confirm Booking
              </Button>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </Layout>
  );
};

export default EscortDetailPage;
